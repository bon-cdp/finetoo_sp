// Copyright 2025 Finetoo
// Schema-Driven Document Understanding - Operation Definitions v1

syntax = "proto3";

package finetoo.operations.v1;

// Note: graph.proto types are referenced in comments and future extensions
// import "proto/graph.proto";

option cc_enable_arenas = true;
option java_package = "com.finetoo.operations.v1";
option java_multiple_files = true;

// Operation types (discovered from schema metadata)
enum OperationType {
  OPERATION_TYPE_UNSPECIFIED = 0;  // Required first value
  MATCH = 1;       // Match entities by unique property (requires unique=true)
  FILTER = 2;      // Filter entities by criteria (requires indexed=true)
  COMPARE = 3;     // Compare property values (requires comparable=true)
  TRAVERSE = 4;    // Follow edges/relationships (requires edge exists)
  AGGREGATE = 5;   // Aggregate property values (requires aggregable=true)
  GROUP_BY = 6;    // Group entities by property
  PROJECT = 7;     // Extract specific properties
  JOIN = 8;        // Join results by relationship
}

// Operation represents a single operation that can be performed on the graph
message Operation {
  // Operation type
  OperationType type = 1;

  // Target node or edge type
  string target_type = 2;

  // Property name (for property-based operations)
  string property_name = 3;

  // Parameters for the operation (operation-specific)
  map<string, string> parameters = 4;

  // Operation description (for LLM understanding)
  string description = 5;

  reserved 6 to 15;
}

// OperationPlan is a sequence of operations composed by the LLM
message OperationPlan {
  // Original natural language query
  string query = 1;

  // Sequence of operations to execute
  repeated Operation operations = 2;

  // LLM's reasoning for this plan
  string reasoning = 3;

  // Estimated complexity (for optimization)
  enum Complexity {
    COMPLEXITY_UNSPECIFIED = 0;
    LOW = 1;      // O(n) or better
    MEDIUM = 2;   // O(n log n)
    HIGH = 3;     // O(nÂ²) or worse
  }
  Complexity complexity = 4;

  reserved 5 to 15;
}

// OperationResult contains the result of executing an operation
message OperationResult {
  // Result node IDs
  repeated string node_ids = 1;

  // Computed values (for aggregations, comparisons, etc.)
  map<string, string> values = 2;

  // Provenance: source references (handles, cell addresses, etc.)
  repeated string provenance = 3;

  // Metadata about execution
  int64 execution_time_ms = 4;
  int64 nodes_processed = 5;

  reserved 6 to 15;
}

// MatchOperation parameters (match entities by unique property)
message MatchOperationParams {
  string property_name = 1;
  string value1 = 2;  // Value in first document
  string value2 = 3;  // Value in second document (for cross-document matching)

  reserved 4 to 10;
}

// FilterOperation parameters (filter entities by criteria)
message FilterOperationParams {
  string property_name = 1;

  enum Operator {
    OPERATOR_UNSPECIFIED = 0;
    EQUALS = 1;
    NOT_EQUALS = 2;
    GREATER_THAN = 3;
    LESS_THAN = 4;
    GREATER_EQUAL = 5;
    LESS_EQUAL = 6;
    CONTAINS = 7;
    STARTS_WITH = 8;
    ENDS_WITH = 9;
    REGEX = 10;
  }
  Operator op = 2;

  string value = 3;

  reserved 4 to 15;
}

// CompareOperation parameters (compare property values)
message CompareOperationParams {
  string property_name = 1;
  string node_id_1 = 2;
  string node_id_2 = 3;

  // Tolerance for numeric comparisons
  double tolerance = 4;

  reserved 5 to 10;
}

// TraverseOperation parameters (follow edges)
message TraverseOperationParams {
  string edge_type = 1;
  repeated string start_node_ids = 2;

  // Traversal depth (-1 for unlimited)
  int32 max_depth = 3;

  // Direction
  enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    OUTGOING = 1;  // Follow edges from source
    INCOMING = 2;  // Follow edges to target
    BOTH = 3;      // Both directions
  }
  Direction direction = 4;

  reserved 5 to 10;
}

// AggregateOperation parameters (compute aggregate)
message AggregateOperationParams {
  string property_name = 1;

  enum Function {
    FUNCTION_UNSPECIFIED = 0;
    COUNT = 1;
    SUM = 2;
    AVG = 3;
    MIN = 4;
    MAX = 5;
    STDDEV = 6;
  }
  Function function = 2;

  reserved 3 to 10;
}

// GroupByOperation parameters (group entities)
message GroupByOperationParams {
  string property_name = 1;

  // Optional: aggregation to perform on each group
  AggregateOperationParams aggregate = 2;

  reserved 3 to 10;
}

// ProjectOperation parameters (extract properties)
message ProjectOperationParams {
  repeated string property_names = 1;

  // Optional: rename properties in output
  map<string, string> rename_map = 2;

  reserved 3 to 10;
}

// JoinOperation parameters (join by relationship)
message JoinOperationParams {
  string edge_type = 1;
  repeated string left_node_ids = 2;
  repeated string right_node_ids = 3;

  reserved 4 to 10;
}

// QueryRequest for the query service
message QueryRequest {
  // Natural language query
  string query = 1;

  // Document IDs to query (empty = all documents)
  repeated string document_ids = 2;

  // Additional context for the LLM
  map<string, string> context = 3;

  reserved 4 to 15;
}

// QueryResponse from the query service
message QueryResponse {
  // Natural language answer
  string answer = 1;

  // Operation result with provenance
  OperationResult result = 2;

  // Operation plan that was executed
  OperationPlan plan = 3;

  // Provenance references (handles, etc.)
  repeated string provenance = 4;

  // Metadata
  int64 total_time_ms = 5;
  bool success = 6;
  string error_message = 7;

  reserved 8 to 20;
}
